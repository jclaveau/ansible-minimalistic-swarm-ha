# https://github.com/geerlingguy/ansible-role-docker
- hosts: all
  vars:
    # firewall_disable_firewalld: true
    # firewall_disable_ufw: true
    firewall_allowed_tcp_ports:
      - "22"   # ssh
      - "80"   # http
      - "9090" # cockpit
      - "8080" # traefik webui
      - "443"  # https
      - "2376" # docker
      - "2377" # docker
      - "7946" # docker container network discovery tcp
      - "24007" # glusterfs
      - "24008" # glusterfs
      - "49152" # glusterfs: /gluster/brick
      - "111"   # glusterfs: portmapper
      - "3306"   # mysql
      - "9000"   # portainer
      # - "4567"   # galera
      # - "4568"   # galera
      # - "4444"   # galera
    firewall_allowed_udp_ports:
      - "111"   # glusterfs: portmapper
      - "7946"  # docker container network discovery udp
      - "4789"  # docker container ingress network
      # - "4567"  # galera in case of for multicast
  roles:
    - geerlingguy.firewall
  tags:
    - firewall
    
- hosts: all
  tags:
    - tools
  tasks:
    - name: Install common tools
      package:
        name: "{{ item }}"
      with_items:
        - ca-certificates
        - software-properties-common
        - gnupg
        - net-tools
        - nmap
        - locate
        - nano
        - htop
        - wget
        - curl
        - unzip
        - zip

- hosts: all
  tags:
    - cockpit
  tasks:
    - name: Install Cockpit packages
      package:
        name: "{{ item }}"
      with_items:
        - cockpit
        - cockpit-docker
        # - cockpit-machines
        - cockpit-pcp
    - name: ensure Cockpit service is running
      service:
        name: cockpit
        enabled: yes
        state: started

- hosts: swarm
  vars:
    pip_install_packages:
      - name: docker
  roles:
    - geerlingguy.pip # used to build docker images (need update?)
    - geerlingguy.docker
  tags:
    - swarm-install

- hosts: swarm_managers
  vars:
    swarm_type_of_node: manager
    swarm_leader_address: "{{ hostvars[groups['swarm_managers'][0]]['ansible_host'] }}"
  roles:
    - jclaveau.swarm
  tags:
    - swarm
    - swarm-start

- hosts: swarm_workers
  vars:
    swarm_type_of_node: worker
    swarm_leader_address: "{{ hostvars['manager1']['ansible_host'] }}"
  roles:
    - jclaveau.swarm
  tags:
    - swarm
    - swarm-start

# - hosts: localhost
  # connection: local
  # tasks:
    # - debug: var=ansible_all_ipv4_addresses
    # - debug: var=ansible_default_ipv4.address
  # tags:
    # - test
    
- hosts: gluster
  tasks:
    - name: Add hosts from inventory to /etc/hosts
      tags:
        - hosts
      blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['all'] %}
          {% if hostvars[host]['ansible_host'] == ansible_default_ipv4.address %}
          127.0.0.1 {{ host }}
          {% else %}
          {{ hostvars[host]['ansible_host'] }} {{ host }}
          {% endif %}
          {% endfor %}

- hosts: gluster
  tags:
    - gluster
  roles:
    - geerlingguy.glusterfs
  vars:
    gluster_mount_dir: /mnt/gluster
    gluster_brick_dir: /srv/gluster/brick
    gluster_brick_name: swarm-shared-volume
  tasks:
    - name: Ensure Gluster brick and mount directories exist.
      file: "path={{ item }} state=directory mode=0775"
      with_items:
        - "{{ gluster_brick_dir }}"
        - "{{ gluster_mount_dir }}"

    - name: Configure Gluster volume.
      debugger: on_failed
      gluster_volume:
        state: present
        name: "{{ gluster_brick_name }}"
        brick: "{{ gluster_brick_dir }}"
        replicas: 2
        cluster: "{{ groups.gluster | join(',') }}"
        host: "{{ inventory_hostname }}"
        force: yes
      run_once: true

    - name: Ensure Gluster volume is mounted.
      mount:
        name: "{{ gluster_mount_dir }}"
        src: "{{ inventory_hostname }}:/{{ gluster_brick_name }}"
        fstype: glusterfs
        opts: "defaults,_netdev"
        state: mounted

# Local mount
# umount /mnt
# chown -R username /etc/fstab /mnt
# chown -R username /mnt 
# echo 'localhost:/swarm-gfs /mnt glusterfs defaults,_netdev,backupvolfile-server=localhost 0 0' >> /etc/fstab 
# mount.glusterfs localhost:/swarm-gfs /mnt 
# chown -R username:docker /mnt

- hosts: gluster
  tags:
    - traefik
  tasks:
    - name: Inspect network
      shell: docker network inspect traefik-public
      failed_when: false
      register: traefik_public_network_result
    - name: Create Traefik's network (docker_network doesn't work with swarm)
      shell: docker network create -d overlay traefik-public
      run_once: true
      when: "(traefik_public_network_result.stderr.find('Error: No such network: traefik-public') == -1)"
      
    - name: Ensure /docker/traefik-letsencrypt-compose/ exists
      file: "path=/docker/traefik-letsencrypt-compose/ state=directory mode=0775"
    - name: Ensure /mnt/gluster/letsencrypt exists
      file: "path=/mnt/gluster/letsencrypt state=directory mode=0775"
    - name: Send docker-compose.yml
      copy:
        src: ./docker/traefik-letsencrypt-compose/docker-compose.yml
        dest: /docker/traefik-letsencrypt-compose/docker-compose.yml
    - name: Deploy traefik
      docker_stack:
        state: present
        name: traefik
        compose:
          - /docker/traefik-letsencrypt-compose/docker-compose.yml
      run_once: true
      environment:
        DOMAIN: "{{ admin_domain }}"
        TRAEFIK_USER: "{{ admin_user }}"
        EMAIL: "{{ admin_email }}"
        TRAEFIK_PASSWORD_HASH: "{{ traefik_admin_hashed_password }}" #  htpasswd -nBC 10 yout_username
        LETS_ENCRYPT_STORAGE_PATH: /mnt/gluster/letsencrypt
